{
  
  "0": {
    "title": "01. 구글 번역기 사용 및 shortcut 지정방법",
    "content": "구글 번역기 사용 및 shortcut 지정방법 . chrome extension 접속 . | Google Translate 찾아서 Add to Chrome 클릭 . | 브라우저 메뉴에 점 3개 (메뉴바) 클릭 - More tools 클릭 - Extensions 클릭 . | 왼쪽 상단에 메뉴 클릭 - Keyboard shortcuts 클릭 . | Type a shortcut 란에 shortcut 지정 . | Google Translate의 Details버튼 클릭 - Extension options 클릭 . | My primary language를 Korean으로 수정 - save버튼 클릭 . |",
    "url": "http://localhost:4000/docs/etc/01.%20%EA%B5%AC%EA%B8%80%20%EB%B2%88%EC%97%AD%EA%B8%B0%20%EC%82%AC%EC%9A%A9%20%EB%B0%8F%20shortcut%20%EC%A7%80%EC%A0%95%EB%B0%A9%EB%B2%95/",
    "relUrl": "/docs/etc/01.%20%EA%B5%AC%EA%B8%80%20%EB%B2%88%EC%97%AD%EA%B8%B0%20%EC%82%AC%EC%9A%A9%20%EB%B0%8F%20shortcut%20%EC%A7%80%EC%A0%95%EB%B0%A9%EB%B2%95/"
  }
  ,"1": {
    "title": "01. 깃 예전 버전으로 되돌리는 법",
    "content": "$ git clone 깃 저장소 주소 cd 프로젝트명 git reset --hard 커밋해시 .",
    "url": "http://localhost:4000/docs/Git/01.%20%EA%B9%83%20%EC%98%88%EC%A0%84%20%EB%B2%84%EC%A0%84%EC%9C%BC%EB%A1%9C%20%EB%90%98%EB%8F%8C%EB%A6%AC%EB%8A%94%20%EB%B2%95/",
    "relUrl": "/docs/Git/01.%20%EA%B9%83%20%EC%98%88%EC%A0%84%20%EB%B2%84%EC%A0%84%EC%9C%BC%EB%A1%9C%20%EB%90%98%EB%8F%8C%EB%A6%AC%EB%8A%94%20%EB%B2%95/"
  }
  ,"3": {
    "title": "CSS",
    "content": "",
    "url": "http://localhost:4000/docs/CSS",
    "relUrl": "/docs/CSS"
  }
  ,"4": {
    "title": "Database",
    "content": "",
    "url": "http://localhost:4000/docs/Database",
    "relUrl": "/docs/Database"
  }
  ,"5": {
    "title": "Django",
    "content": "",
    "url": "http://localhost:4000/docs/Django",
    "relUrl": "/docs/Django"
  }
  ,"6": {
    "title": "Git",
    "content": "",
    "url": "http://localhost:4000/docs/Git",
    "relUrl": "/docs/Git"
  }
  ,"7": {
    "title": "HTML",
    "content": "",
    "url": "http://localhost:4000/docs/HTML",
    "relUrl": "/docs/HTML"
  }
  ,"8": {
    "title": "InlineModelAdmin objects",
    "content": "InlineModelAdmin objects . 관리자 인터페이스는 상위 모델과 동일한 페이지에서 모델을 편집 할 수 있습니다. . 예제코드) . # Instagram/app/posts/models.py from django.db import models class Author(models.Model): content = models.TextField(blank=True) class Book(models.Model): author = models.ForeignKey(Author, on_delete=models.CASCADE) . # Instagram/app/posts/admin.py from django.contrib import admin from .models import Author, Book class BookInline(admin.TabularInline): model = Book # 어느 모델을 가져올 것인지 extra = 1 # 여분 작성 항목은 몇개를 기본으로 표시할것인지 @admin.register(Author) class AuthorAdmin(admin.ModelAdmin): inlines = [ BookInline, # 해당 클래스를 인라인으로 추가한다. ] @admin.register(Book) class BookAdmin(admin.ModelAdmin): pass . 예제코드의 결과) . .",
    "url": "http://localhost:4000/docs/Django/InlineModelAdmin%20objects/",
    "relUrl": "/docs/Django/InlineModelAdmin%20objects/"
  }
  ,"9": {
    "title": "JavaScript",
    "content": "",
    "url": "http://localhost:4000/docs/JavaScript",
    "relUrl": "/docs/JavaScript"
  }
  ,"10": {
    "title": "Python",
    "content": "",
    "url": "http://localhost:4000/docs/Python",
    "relUrl": "/docs/Python"
  }
  ,"11": {
    "title": "QuerySet를 리턴하지 않는 메소드",
    "content": "QuerySet를 리턴하지 않는 메소드 . 위 문서는 https://docs.djangoproject.com/en/3.0/ref/models/querysets/ 를 참조하였습니다. . 다음 QuerySet 메소드는 QuerySet을 평가하고 QuerySet 이외의 것을 리턴합니다. . 이러한 메소드는 캐시를 사용하지 않습니다. (캐싱 및 Queryset 참조) . 메소드는 호출될때마다 데이터베이스를 쿼리합니다. . . 01. get() . 형태) . get(**kwargs) . 주어진 조회 매개 변수와 일치하는 객체를 반환합니다. . 이 조회 매개 변수는 필드 조회에 설명 된 형식이어야 합니다. . get()은 여러 객체를 찾은 경우 . MultipleObjectsReturned를 발생시킵니다. . MultipleObjectsReturned 예외는 모델 클래스의 속성입니다. . 지정된 매개 변수에 대해 개체를 찾지 못하면 get() 에서 DoesNotExist 예외를 발생시킵니다. 이 예외는 모델 클래스의 속성입니다. . 예제 코드) . # 예제 코드 Entry.objects.get(id=&#39;foo&#39;) # 예제 코드의 결과 raises Entrys.DoesNotExist . DoesNotExist 예외는 django.core.exceptions.ObjectDoesNotExist에서 상속되므로 여러 DoesNotExist 예외를 대상으로 할 수 있습니다. . 예제 코드) . # Post 모델에 pk=2인 인스턴스가 없다고 가정 # 예제코드 from django.core.exceptions import ObjectDoesNotExist try: post = Post.objects.get(pk=2) except ObjectDoesNotExist: print(&quot;Either the entry or blog doesn&#39;t exist.&quot;) # 예제코드 결과 Either the entry or blog doesn&#39;t exist . 쿼리 셋이 하나의 행을 반환 할 것으로 예상되면 인수없이 get()을 사용하여 해당 행의 객체를 반환 할 수 있습니다. . 예제 코드) . # 예제코드 Post.objects.get() # 예제코드 결과 &lt;Post: minjyo | 2020-01-10 05:09:29.247590+00:00&gt; . . 02. create() . 형태) . create(**kwargs) . 객체를 생성하고 한 번에 모두 저장하는 편리한 방법이다. 따라서 . . # 첫번째 예제코드 p = Person.objects.create(first_name=&quot;jyo&quot;, last_name=&quot;Min&quot;) # 두번째 예제코드 p = Person(first_name=&quot;jyo&quot;, last_name=&quot;Min&quot;) p.save(force_insert=True) . 첫번째 예제코드 와 두번째 예제코드 는 같은 동작을 한다. . . 02-1. force_insert 매개변수 . force_insert 매개 변수는 다른곳에 문서화되어 있지만 항상 새 객체가 작성된다는 의미입니다. . 그러나 모델에 설정 한 수동 기본 키 값이 포함되어 있고 해당 값이 데이터베이스에 이미 존재하는 경우 기본 키는 고유해야하므로 . IntegrityError와 함께 create() 호출이 실패합니다. 수동 기본 키를 사용하는 경우 예외를 처리 할 준비를 하십시오. . . 03. get_or_create() . 형태) . get_or_create(defaults=None, **kwargs) . 주어진 kwags로 객체를 찾는 편리한 방법이다. . (모델에 모든 필드에 대한 기본값이 있는 경우 비어 있을 수 있음), 필요한 경우 하나를 만듬 . (object, created) 튜플을 반환합니다. . 여기서 object는 검색 또는 생성 된 객체이며 created는 새 객체 생성 여부를 지정하는 부울 입니다. . 예제) . ​ 예제의 데이터베이스 기본구조) . ​ . # 예제코드1 user=User.objects.get(pk=1) Post.objects.get_or_create(author=user,content=&quot;content1&quot;, test1=&quot;test1&quot;) # 예제코드1 결과 (&lt;Post: minjyo | 2020-01-10 12:09:43.727018+00:00&gt;, True) . ​ 예제코드1에 따른 변경된 데이터베이스 테이블) . ​ . # 예제코드2 user=User.objects.get(pk=1) Post.objects.get_or_create(author=user,content=&quot;content2&quot;, test1=&quot;test2&quot;) # 예제코드2 결과 (&lt;Post: minjyo | 2020-01-10 12:14:32.555263+00:00&gt;, True) . ​ 예제코드2에 따른 변경된 데이터베이스 테이블) . . # 예제코드3 user=User.objects.get(pk=1) Post.objects.get_or_create(author=user, content=&quot;content2&quot;, test1=&quot;test2&quot;) # 예제코드3 결과 (&lt;Post: minjyo | 2020-01-10 12:14:32.555263+00:00&gt;, False) . ​ 예제코드3에 따른 데이터베이스(객체가 생성되지 않았기 때문에 기존 데이터베이스에서 달라진 부분없음) ) . ​ . 이는 요청이 병렬로 작성 될 때 및 중복 코드에 대한 바로 가기로 중복 오브젝트가 작성된는 것을 방지하기 위한것입니다. . try: obj = Person.objects.get(first_name=&#39;John&#39;, last_name=&#39;Lennon&#39;) except Person.DoesNotExist: obj = Person(first_name=&#39;John&#39;, last_name=&#39;Lennon&#39;, birthday=data(1940,10,9)) obj.save() . 여기서 동시 요청으로 동일한 매개 변수를 사용하여 개인을 저장하려는 여러 번의 시도가 이루어질 수 있습니다. . 이 경쟁 조건을 피하기 위해 get_or_create()를 사용하여 위 예제를 다시 작성할수 있습니다. . obj, create = Person.objects.get_or_create( first_name= &#39;John&#39;, last_name= &#39;Lennon&#39;, defaults={&#39;birthday&#39;: date(1940, 10, 9)}, ) . 선택 사항 인 defaults를 제외하고 get_or_create()에 전달 된 키워드 인수는 get() 호출에 사용됩니다. . 객체가 발견되면 get_or_create()는 해당 객체의 튜플과 False를 반환합니다. . get_or_create()를 filter()와 연결하고 Q객체를 사용하여 검색된 객체에 대해 보다 복잡한 조건을 지정할 수 있습니다. . 예를 들어 Robert 또는 Bob Marley(있는 경우)를 검색하고 그렇지 않은 경우 후자를 작성하십시오. . from django.db models import Q obj, created = Person.objects.filter( Q(first_name=&#39;Bob&#39;) | Q(first_name=&#39;Robert&#39;), ).get_or_create(last_name=&#39;Marley&#39;, defaults={&#39;first_name&#39;: &#39;Bob&#39;}) . 만약 여러 객체가 발견되면 get_or_create()는 MultipleObjectsReturned를 발생시킵니다. . 객체를 찾지 못하면 get_or_create()는 새 객체를 인스턴스화하고 저장하여 새 객체의 튜플과 True를 반환합니다. . get_or_create() 메소드는 수동으로 지정된 기본키를 사용하는 경우 create()와 유사한 오류 동작을 갖습니다. 개체를 만들어야하고 키가 이미 데이터베이스에 있으면 IntegrityError가 발생합니다. . 마지막으로 Django 뷰에서 get_or_create() 사용에 대한 단어. 특별한 이유가 없는 한 POST 요청에서만 사용해야 한다. . GET 요청은 데이터에 영향을 미치지 않아야 합니다. . 대신 페이지 요청이 데이터에 부작용이 있을 때마다 POST를 사용하십시오. 자세한 내용은 HTTP 사양의 안전한 방법을 참조하십시오. . Warning . ManyToManyField 속성 및 역관계를 통해 get_or_create ()를 사용할 수 있습니다. 이 경우 해당 관계의 컨텍스트 내에서 쿼리를 제한합니다. 일관성있게 사용하지 않으면 무결성 문제가 발생할 수 있습니다. . 모델이 다음과 같을때 . class Chapter(models.Model): title = models.CharField(max_length=255, unique=True) class Book(models.models.Model): title = models.CharField(max_length=256) chapters = models.ManyToManyField(Chapter) . 도서의 chapter 필드를 통해 get_or_create()를 사용할 수 있지만 해당 도서의 컨텍스트 내에서만 가져옵니다. . &gt;&gt;&gt; book = Book.objects.create(title=&#39;Ulysses&#39;) &gt;&gt;&gt; book.chapters.get_or_create(title=&quot;Telemachus&quot;) (&lt;Chapter: Telemachus&gt;, True) &gt;&gt;&gt; book.chapters.get_or_create(title=&quot;Telemachus&quot;) (&lt;Chapter: Telemachus&gt;, False) &gt;&gt;&gt; Chapter.objects.create(title=&quot;Chapter1&quot;) (&lt;Chapter: Chapter 1&gt;) &gt;&gt;&gt; book.chapters.get_or_create(title=&quot;Chapter1&quot;) # Raises IntegrityError . . exists() . QuerySet에 결과가 있으면 True를, 그렇지 않으면 False를 리턴합니다. . 가장 간단하고 빠른 방법으로 쿼리를 수행하려고 시도하지만 일반 QuerySet 쿼리와 거의 동일한 쿼리를 실행합니다. . exists()는 QuerySet의 개체 멤버 자격과 QuerySet의 개체 존재, 특히 큰 QuerySet의 컨텍스트와 관련된 검색에 유용합니다. . 고유 필드를 가진 모델이 QuerySet의 멤버인지 확인하는 가장 효율적인 방법은 다음과 같습니다. . entry = Entry.objects.get(pk=123) if some_queryset.filter(pk=entry.pk).exists(): print(&quot;Entry contained in queryset&quot;) . 전체 쿼리 집합을 평가하고 반복 해야하는 다음보다 빠르다. . if entry in some_queryset: print(&quot;Entry contained in QuerySet&quot;) . 그리고 쿼리 셋에 아이템이 포함되어 있는지 확인하려면 . if some_queryset.exists(): print(&quot;There is at least one object in some_queryset&quot;) . 위 코드가 아래 코드보다 빠르다. . if some_queryset: print(&quot;There is at least one object in some_queryset&quot;) . 그러나 크게는 아닙니다 (따라서 효율성을 높이기 위해 큰 쿼리 집합이 필요함) . 또한 some_queryset이 아직 평가되지 않았지만 어느 시점에 있다는 것을 알고 있다면 some_queryset.exists ()를 사용하면 더 많은 전반적인 작업을 수행합니다 (존재 검사에 대한 하나의 쿼리와 나중에 결과를 검색하기위한 여분의 쿼리) )를 사용하는 것보다 bool (some_queryset)을 사용하여 결과를 검색 한 다음 반환 된 것이 있는지 확인합니다. .",
    "url": "http://localhost:4000/docs/Django/QuerySet%EB%A5%BC%20%EB%A6%AC%ED%84%B4%ED%95%98%EC%A7%80%20%EC%95%8A%EB%8A%94%20%EB%A9%94%EC%86%8C%EB%93%9C/",
    "relUrl": "/docs/Django/QuerySet%EB%A5%BC%20%EB%A6%AC%ED%84%B4%ED%95%98%EC%A7%80%20%EC%95%8A%EB%8A%94%20%EB%A9%94%EC%86%8C%EB%93%9C/"
  }
  ,"12": {
    "title": "TIL",
    "content": "",
    "url": "http://localhost:4000/docs/TIL",
    "relUrl": "/docs/TIL"
  }
  ,"13": {
    "title": "Buttons",
    "content": "",
    "url": "http://localhost:4000/docs/HTML/buttons/",
    "relUrl": "/docs/HTML/buttons/"
  }
  ,"14": {
    "title": "Buttons",
    "content": "",
    "url": "http://localhost:4000/docs/CSS/buttons/",
    "relUrl": "/docs/CSS/buttons/"
  }
  ,"15": {
    "title": "Buttons",
    "content": "",
    "url": "http://localhost:4000/docs/Python/buttons/",
    "relUrl": "/docs/Python/buttons/"
  }
  ,"16": {
    "title": "Buttons",
    "content": "",
    "url": "http://localhost:4000/docs/Database/buttons/",
    "relUrl": "/docs/Database/buttons/"
  }
  ,"17": {
    "title": "Buttons",
    "content": "",
    "url": "http://localhost:4000/docs/etc/buttons/",
    "relUrl": "/docs/etc/buttons/"
  }
  ,"18": {
    "title": "Buttons",
    "content": "",
    "url": "http://localhost:4000/docs/JavaScript/buttons/",
    "relUrl": "/docs/JavaScript/buttons/"
  }
  ,"19": {
    "title": "Buttons",
    "content": "",
    "url": "http://localhost:4000/docs/TIL/buttons/",
    "relUrl": "/docs/TIL/buttons/"
  }
  ,"20": {
    "title": "Buttons",
    "content": "",
    "url": "http://localhost:4000/docs/Git/buttons/",
    "relUrl": "/docs/Git/buttons/"
  }
  ,"21": {
    "title": "Code",
    "content": "",
    "url": "http://localhost:4000/docs/HTML/code/",
    "relUrl": "/docs/HTML/code/"
  }
  ,"22": {
    "title": "Code",
    "content": "",
    "url": "http://localhost:4000/docs/CSS/code/",
    "relUrl": "/docs/CSS/code/"
  }
  ,"23": {
    "title": "Code",
    "content": "",
    "url": "http://localhost:4000/docs/Python/code/",
    "relUrl": "/docs/Python/code/"
  }
  ,"24": {
    "title": "Code",
    "content": "",
    "url": "http://localhost:4000/docs/Database/code/",
    "relUrl": "/docs/Database/code/"
  }
  ,"25": {
    "title": "Code",
    "content": "",
    "url": "http://localhost:4000/docs/etc/code/",
    "relUrl": "/docs/etc/code/"
  }
  ,"26": {
    "title": "Code",
    "content": "",
    "url": "http://localhost:4000/docs/JavaScript/code/",
    "relUrl": "/docs/JavaScript/code/"
  }
  ,"27": {
    "title": "Code",
    "content": "",
    "url": "http://localhost:4000/docs/TIL/code/",
    "relUrl": "/docs/TIL/code/"
  }
  ,"28": {
    "title": "Code",
    "content": "",
    "url": "http://localhost:4000/docs/Git/code/",
    "relUrl": "/docs/Git/code/"
  }
  ,"29": {
    "title": "etc",
    "content": "",
    "url": "http://localhost:4000/docs/etc",
    "relUrl": "/docs/etc"
  }
  ,"30": {
    "title": "field정리",
    "content": "Model field reference . 1. ImageFIeld . 형태 . class ImageField(upload_to=None, height_field=None, width_field=None, max_length=100, **options) . | 특징 . 2.1. FileFIeld에서 모든 속성과 메소드를 상속 . 2.2. 업로드 된 객체가 유효한 이미지인지 확인 . 2.3. FileField에 사용 가능한 특수 속성 외에도 ImageField에는 높이 및 너비 속성이 추가 . 2.4. Pillow 라이브러리가 필요 . 2.5. ImageField 인스턴스는 데이터베이스에서 기본 최대 길이가 100자인 varchar 열로 만들어짐 . ​ 다른 필드와 마찬가지로 max_length 인수를 사용하여 최대 길이 변경 가능 . 2.6 이 필드의 기본 양식 위젯은 ClearableFileInput . 2.7. 이러한 속성에 대한 쿼리를 용이하게하기 위해 ImageField에는 두 개의 추가 선택적 인수가 존재 . ​ 2.7.1. ImageField.height_field . ​ 모델 인스턴스가 저장 될 때마다 이미지의 높이에 자동으로 채워지는 모델 필드의 이름 . ​ 2.7.2. ImageField.width_field . ​ 모델 인스턴스가 저장 될 때마다 이미지 너비로 자동 채워지는 모델 필드의 이름 . ​ . | 예제) . 예제코드) . # 예제코드 class User(AbstractUser) img_profile = models.ImageField(&#39;프로필이미지&#39;, blank=True), upload_to=&#39;/usersadf . | ​ 예제코드 결과) . ​ . ​ . localhost:8000/admin에서 사용자 추가되었을때 프로필 이미지 칸이 생성되는걸 확인할 수 있었고 . 장고 데이터베이스에 연결된 SQLite에서 members_user라는 테이블에 들어가 봤을때 img_profile이라는 컬럼이 추가된것을 확인할 수 있음. .",
    "url": "http://localhost:4000/docs/Django/field%EC%A0%95%EB%A6%AC/",
    "relUrl": "/docs/Django/field%EC%A0%95%EB%A6%AC/"
  }
  ,"31": {
    "title": "Home",
    "content": "",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"32": {
    "title": "Labels",
    "content": "",
    "url": "http://localhost:4000/docs/HTML/labels/",
    "relUrl": "/docs/HTML/labels/"
  }
  ,"33": {
    "title": "Labels",
    "content": "",
    "url": "http://localhost:4000/docs/CSS/labels/",
    "relUrl": "/docs/CSS/labels/"
  }
  ,"34": {
    "title": "Labels",
    "content": "",
    "url": "http://localhost:4000/docs/Python/labels/",
    "relUrl": "/docs/Python/labels/"
  }
  ,"35": {
    "title": "Labels",
    "content": "",
    "url": "http://localhost:4000/docs/Database/labels/",
    "relUrl": "/docs/Database/labels/"
  }
  ,"36": {
    "title": "Labels",
    "content": "",
    "url": "http://localhost:4000/docs/etc/labels/",
    "relUrl": "/docs/etc/labels/"
  }
  ,"37": {
    "title": "Labels",
    "content": "",
    "url": "http://localhost:4000/docs/JavaScript/labels/",
    "relUrl": "/docs/JavaScript/labels/"
  }
  ,"38": {
    "title": "Labels",
    "content": "",
    "url": "http://localhost:4000/docs/TIL/labels/",
    "relUrl": "/docs/TIL/labels/"
  }
  ,"39": {
    "title": "Labels",
    "content": "",
    "url": "http://localhost:4000/docs/Git/labels/",
    "relUrl": "/docs/Git/labels/"
  }
  ,"40": {
    "title": "list_display,list_display_links정리",
    "content": "list_display 옵션 . 각 어플리케이션의 모델의 인스턴스에서 나타낼 컬럼값을 표현 . 예시코드) . # Instagram/app/posts/admin.py from django.contrib import admin from .model import Post, PostImage, PostComment, PostLike @admin.register(Post) class PostAdmin(admin.ModelAdmin): list_display = (&#39;author&#39;, &#39;content&#39;, &#39;test1&#39;, &#39;created&#39;) . 예시 코드의 결과 사진) . . list_display_links 옵션 . 목록 내에서 링크로 지정할 필드 목록 (이를 지정하지 않으면, 첫번째 필드에만 링크가 적용) . 예시코드) . # Instagram/app/posts/admin.py from django.contrib import admin from .model import Post, PostImage, PostComment, PostLike @admin.register(Post) class PostAdmin(admin.ModelAdmin): list_display = (&#39;author&#39;, &#39;content&#39;, &#39;test1&#39;, &#39;created&#39;) list_display_links = (&#39;author&#39;, &#39;content&#39;, &#39;created&#39;) . 예시 코드의 결과 사진) . .",
    "url": "http://localhost:4000/docs/Django/list_display,list_display_links%EC%A0%95%EB%A6%AC/",
    "relUrl": "/docs/Django/list_display,list_display_links%EC%A0%95%EB%A6%AC/"
  }
  ,"41": {
    "title": "Lists",
    "content": "",
    "url": "http://localhost:4000/docs/HTML/lists/",
    "relUrl": "/docs/HTML/lists/"
  }
  ,"42": {
    "title": "Lists",
    "content": "",
    "url": "http://localhost:4000/docs/CSS/lists/",
    "relUrl": "/docs/CSS/lists/"
  }
  ,"43": {
    "title": "Lists",
    "content": "",
    "url": "http://localhost:4000/docs/Python/lists/",
    "relUrl": "/docs/Python/lists/"
  }
  ,"44": {
    "title": "Lists",
    "content": "",
    "url": "http://localhost:4000/docs/Database/lists/",
    "relUrl": "/docs/Database/lists/"
  }
  ,"45": {
    "title": "Lists",
    "content": "",
    "url": "http://localhost:4000/docs/etc/lists/",
    "relUrl": "/docs/etc/lists/"
  }
  ,"46": {
    "title": "Lists",
    "content": "",
    "url": "http://localhost:4000/docs/JavaScript/lists/",
    "relUrl": "/docs/JavaScript/lists/"
  }
  ,"47": {
    "title": "Lists",
    "content": "",
    "url": "http://localhost:4000/docs/TIL/lists/",
    "relUrl": "/docs/TIL/lists/"
  }
  ,"48": {
    "title": "Lists",
    "content": "",
    "url": "http://localhost:4000/docs/Git/lists/",
    "relUrl": "/docs/Git/lists/"
  }
  ,"49": {
    "title": "path 함수에 대해",
    "content": "path() 함수에 대해 . urlpatterns에 포함 할 요소를 반환합니다. . 예제코드) . urlpatterns = [ path(&#39;articles/&lt;slug:title&gt;/&lt;int:section&gt;/&#39;, views.section, name=&#39;article-section&#39;), path(&#39;weblog/&#39;, include(&#39;blog.urls&#39;)), ] . 위 코드에서 . &lt;int:section&gt;은 10진수 문자열과 일치하고 값을 int로 변환합니다. . | include() 는 이 위치에 “포함” 되어야 하는 다른 URLconf 모듈에 대한 전체 Python 가져오기 경로를 취하는 함수 . 선택적으로 항목이 포함될 애플리케이션의 네임 스페이스 및 인스턴스 네임 스페이스도 지정할 수 있습니다. . |",
    "url": "http://localhost:4000/docs/Django/path%20%ED%95%A8%EC%88%98%EC%97%90%20%EB%8C%80%ED%95%B4/",
    "relUrl": "/docs/Django/path%20%ED%95%A8%EC%88%98%EC%97%90%20%EB%8C%80%ED%95%B4/"
  }
  ,"50": {
    "title": "Tables",
    "content": "",
    "url": "http://localhost:4000/docs/HTML/tables/",
    "relUrl": "/docs/HTML/tables/"
  }
  ,"51": {
    "title": "Tables",
    "content": "",
    "url": "http://localhost:4000/docs/CSS/tables/",
    "relUrl": "/docs/CSS/tables/"
  }
  ,"52": {
    "title": "Tables",
    "content": "",
    "url": "http://localhost:4000/docs/Python/tables/",
    "relUrl": "/docs/Python/tables/"
  }
  ,"53": {
    "title": "Tables",
    "content": "",
    "url": "http://localhost:4000/docs/Database/tables/",
    "relUrl": "/docs/Database/tables/"
  }
  ,"54": {
    "title": "Tables",
    "content": "",
    "url": "http://localhost:4000/docs/etc/tables/",
    "relUrl": "/docs/etc/tables/"
  }
  ,"55": {
    "title": "Tables",
    "content": "",
    "url": "http://localhost:4000/docs/JavaScript/tables/",
    "relUrl": "/docs/JavaScript/tables/"
  }
  ,"56": {
    "title": "Tables",
    "content": "",
    "url": "http://localhost:4000/docs/TIL/tables/",
    "relUrl": "/docs/TIL/tables/"
  }
  ,"57": {
    "title": "Tables",
    "content": "",
    "url": "http://localhost:4000/docs/Git/tables/",
    "relUrl": "/docs/Git/tables/"
  }
  ,"58": {
    "title": "Typography",
    "content": "",
    "url": "http://localhost:4000/docs/HTML/typography/",
    "relUrl": "/docs/HTML/typography/"
  }
  ,"59": {
    "title": "Typography",
    "content": "",
    "url": "http://localhost:4000/docs/CSS/typography/",
    "relUrl": "/docs/CSS/typography/"
  }
  ,"60": {
    "title": "Typography",
    "content": "",
    "url": "http://localhost:4000/docs/Python/typography/",
    "relUrl": "/docs/Python/typography/"
  }
  ,"61": {
    "title": "Typography",
    "content": "",
    "url": "http://localhost:4000/docs/Database/typography/",
    "relUrl": "/docs/Database/typography/"
  }
  ,"62": {
    "title": "Typography",
    "content": "",
    "url": "http://localhost:4000/docs/JavaScript/typography/",
    "relUrl": "/docs/JavaScript/typography/"
  }
  ,"63": {
    "title": "Typography",
    "content": "",
    "url": "http://localhost:4000/docs/TIL/typography/",
    "relUrl": "/docs/TIL/typography/"
  }
  ,"64": {
    "title": "새로운 QuerySet을 반환하는 메소드",
    "content": "https://docs.djangoproject.com/en/3.0/ref/models/querysets/#filter . 새로운 QuerySet을 반환하는 메소드 . Django는 QuerySet에서 반환 된 결과 유형이나 SQL 쿼리 방식을 수정하는 다양한 QuerySet 구체화 방법을 제공합니다. . 1. filter() . 형태) . filter(**kwargs) . 주어진 조회 매개 변수와 일치하는 객체를 포함하는 새로운 QuerySet을 반환합니다. . 조회 매개변수 (** kwargs)는 아래의 필드 조회에 설명 된 형식이어야 합니다. 기본 SQL 문에서 AND를 통해 여러 매개 변수가 결합됩니다. . 보다 복잡한 쿼리 (예 : OR 문이있는 쿼리)를 실행해야하는 경우 Q 개체를 사용할 수 있습니다. . 예제) . ​ 예제의 데이터베이스 테이블) . . . . &gt;&gt;&gt; post=Post.objects.get(pk=3) &gt;&gt;&gt; user=User.objects.get(pk=1) &gt;&gt;&gt; post_like_qs=PostLike.objects.filter(post=post, user=user) &gt;&gt;&gt; post_like_qs &lt;QuerySet [&lt;PostLike: PostLike object (2)&gt;]&gt; .",
    "url": "http://localhost:4000/docs/Django/%EC%83%88%EB%A1%9C%EC%9A%B4%20QuerySet%EC%9D%84%20%EB%B0%98%ED%99%98%ED%95%98%EB%8A%94%20%EB%A9%94%EC%86%8C%EB%93%9C/",
    "relUrl": "/docs/Django/%EC%83%88%EB%A1%9C%EC%9A%B4%20QuerySet%EC%9D%84%20%EB%B0%98%ED%99%98%ED%95%98%EB%8A%94%20%EB%A9%94%EC%86%8C%EB%93%9C/"
  }
  ,"65": {
    "title": "장고 migrations 충돌시 해결방법(한곳으로 모으는거 다시 코드 확인해야함)",
    "content": "장고 migrations 충돌시 해결방법 . members └───migrations │ 0001_initial.py │ 0002_user_img_profile.py │ 0002_user_img_file.py . 위 상황이라고 해보자, 위 상황에서 해결방법은 2가지이다. . 1. 첫번째 방법 : migrations 파일의 dependencies를 수정 및 숫자 변경 . 예시 코드) . # 0002_user_img_profile.py class Migration(migrations.Migration): dependencies = [ (&#39;members&#39;, &#39;0001_initial&#39;), ] operations = [ migrations.AddField( model_name=&#39;user&#39;, name=&#39;img_profile&#39;, field=models.ImageField(blank=True, upload_to=&#39;users/&#39;), ), ] . # 0002_user_img_profile.py &gt; 0003_user_img_profile.py으로 이름 수정 class Migration(migrations.Migration): dependencies = [ # (&#39;members&#39;, &#39;0001_initial&#39;), 현재 파일이 전 0002 마이그레이션 파일을 의존하게함 (&#39;members&#39;, &#39;0002_user_img_profile.py&#39;) ] operation = [ migrations.AddField( model_name=&#39;user&#39;, name=&#39;img_profile&#39;, field=models.ImageField(blank=True, upload_to=&#39;users/&#39;), ) ] . 2. 두번째 방법 : . operations를 한곳으로 몰고 operations를 한곳으로 모은 migrations를 제외한 다른 하나를 제거 . from django.db import migrations, models class Migration(migrations.Migration): dependencies = [ (&#39;members&#39;, &#39;0001_initial&#39;), ] operations = [ # 0002_user_img_profile.py 에서 가져온 부분 시작 migrations.AddField( model_name=&#39;user&#39;, name=&#39;img_profile&#39;, field=models.ImageField(blank=True, upload_to=&#39;user/&#39;), ), # 0002_user_img_profile.py 에서 가져온 부분 끝 # 0002_user_img_file.py 에서 가져온 부분 시작 migrations.AddField( model_name=&#39;user&#39;, name=&#39;img_profile&#39;, field=models.ImageField(blank=True, upload_to=&#39;users/&#39;), ), # 0002_user_img_file.py 에서 가져온 부분 끝 ] .",
    "url": "http://localhost:4000/docs/Django/%EC%9E%A5%EA%B3%A0%20migrations%20%EC%B6%A9%EB%8F%8C%EC%8B%9C%20%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95(%ED%95%9C%EA%B3%B3%EC%9C%BC%EB%A1%9C%20%EB%AA%A8%EC%9C%BC%EB%8A%94%EA%B1%B0%20%EB%8B%A4%EC%8B%9C%20%EC%BD%94%EB%93%9C%20%ED%99%95%EC%9D%B8%ED%95%B4%EC%95%BC%ED%95%A8)/",
    "relUrl": "/docs/Django/%EC%9E%A5%EA%B3%A0%20migrations%20%EC%B6%A9%EB%8F%8C%EC%8B%9C%20%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95(%ED%95%9C%EA%B3%B3%EC%9C%BC%EB%A1%9C%20%EB%AA%A8%EC%9C%BC%EB%8A%94%EA%B1%B0%20%EB%8B%A4%EC%8B%9C%20%EC%BD%94%EB%93%9C%20%ED%99%95%EC%9D%B8%ED%95%B4%EC%95%BC%ED%95%A8)/"
  }
  ,"66": {
    "title": "파이썬 패키지 환경을 쉽게 관리할 수 있도록 하는 requirements.txt",
    "content": "파이썬 패키지 환경을 쉽게 관리할 수 있도록 하는 requirements.txt . . 자신이 구성한 환경을 requirements.txt로 만드는 명령어 | . $ pip freeze &gt; requirements.txt . . requirements.txt를 통해 지정한 환경에 설치하는 명령어 | . $ pip install -r requirements.txt .",
    "url": "http://localhost:4000/docs/Django/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%ED%8C%A8%ED%82%A4%EC%A7%80%20%ED%99%98%EA%B2%BD%EC%9D%84%20%EC%89%BD%EA%B2%8C%20%EA%B4%80%EB%A6%AC%ED%95%A0%20%EC%88%98%20%EC%9E%88%EB%8F%84%EB%A1%9D%20%ED%95%98%EB%8A%94%20requirements.txt/",
    "relUrl": "/docs/Django/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%ED%8C%A8%ED%82%A4%EC%A7%80%20%ED%99%98%EA%B2%BD%EC%9D%84%20%EC%89%BD%EA%B2%8C%20%EA%B4%80%EB%A6%AC%ED%95%A0%20%EC%88%98%20%EC%9E%88%EB%8F%84%EB%A1%9D%20%ED%95%98%EB%8A%94%20requirements.txt/"
  }
  
}